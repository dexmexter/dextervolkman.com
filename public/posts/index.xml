<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Dexter&#39;s Personal Site</title>
        <link>https://dextervolkman.com/posts/</link>
        <description>Recent content in Posts on Dexter&#39;s Personal Site</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 16 Aug 2020 17:43:38 -0700</lastBuildDate>
        <atom:link href="https://dextervolkman.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Arch Install</title>
            <link>https://dextervolkman.com/posts/arch_install/</link>
            <pubDate>Sun, 16 Aug 2020 17:43:38 -0700</pubDate>
            
            <guid>https://dextervolkman.com/posts/arch_install/</guid>
            <description>Intro I recently finished creating a home backup server so that I can start taking backups of my laptop automatically. It is a project that lays some groundwork for future systems I would like to implement. The server is working now and I want to take some time to document the pieces that I needed to get the basic operating system installed. This is meant to be a more generic server installation with a few items that were specific to the dv-storage server I was working on getting ready at the time.</description>
            <content type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p>I recently finished creating a home backup server so that I can start taking
backups of my laptop automatically. It is a project that lays some groundwork
for future systems I would like to implement. The server is working now and I
want to take some time to document the pieces that I needed to get the
basic operating system installed. This is meant to be a more generic server
installation with a few items that were specific to the <code>dv-storage</code> server
I was working on getting ready at the time.</p>
<h2 id="part-1-arch-installation-media">Part 1: Arch Installation media</h2>
<h3 id="internet-for-installation-environment">Internet for installation environment</h3>
<p>The first thing to do once booted into the Arch iso is to connect to the
internet. I&rsquo;ve covered <a href="./bootable_usb">how to make a bootable USB</a> in a
previous post. Also note that I&rsquo;m basically just documenting all the steps I
needed to install a basic arch system in this post. A much more better way
to learn how to install arch would be to go through the official tutorial<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Use <code>ip link</code> to locate the name of the network device and then enable it with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ip link set <span style="color:#f92672">[</span>device<span style="color:#f92672">]</span> up
</code></pre></div><p>Then pick a website and try to reach it with <code>ping</code>. Once you&rsquo;ve confirmed that networking is up the
next task is to partition the drives.</p>
<h3 id="update-the-system-clock">Update the system clock</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">timedatectl set-ntp true
</code></pre></div><h3 id="partition-drives2">Partition drives<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></h3>
<p>Look at the available drives with <code>lsblk</code>. In my case I have four drives and
they look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> disk
├─sda1   8:1    <span style="color:#ae81ff">0</span>   511M  <span style="color:#ae81ff">0</span> part /boot
└─sda2   8:2    <span style="color:#ae81ff">0</span>   931G  <span style="color:#ae81ff">0</span> part /
sdb      8:16   <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> disk
└─sdb1   8:17   <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> part
sdc      8:32   <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> disk
└─sdc1   8:33   <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> part
sdd      8:48   <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> disk
└─sdd1   8:49   <span style="color:#ae81ff">0</span> 931.5G  <span style="color:#ae81ff">0</span> part
</code></pre></div><p>If you see numbers it means the drives have already have partitions, that&rsquo;s
fine because we&rsquo;ll be wiping them and starting over. Just take note of the
device names like <code>sda</code> or <code>sdb</code>. If you want more information about the
available block devices use <code>fdisk -l</code>.</p>
<p>To partition the drives, open the device in <code>parted</code> like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">parted /dev/sda
</code></pre></div><p>The first drive requires an additional partition for the bootloader. The
commands needed to partition this drive are:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mktable gpt
mkpart <span style="color:#e6db74">&#34;EFI system partition&#34;</span> fat32 1MiB 512MiB
set <span style="color:#ae81ff">1</span> esp on
mkpart <span style="color:#e6db74">&#34;Storage0&#34;</span> btrfs 512MiB 100%
quit
</code></pre></div><p>You can use <code>print</code> to review the partitions and ensure everything looks the
way that it should before exiting <code>parted</code>. For the other three drives, I did
something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mktable gpt
mkpart <span style="color:#e6db74">&#34;Storage1&#34;</span> btrfs 0% 100%
quit
</code></pre></div><h3 id="filesystem-creation">Filesystem creation</h3>
<p>Now that the partitions are ready, the next step is to make the necessary
filesystems on each of the partitions. The boot partition needs a fat32
filesystem and everything else will be getting a single btrfs filesystem that
spans multiple disks in a RAID1 configuration for both the data and the
metadata.</p>
<p>For the <code>boot</code> partition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkfs.fat -F <span style="color:#ae81ff">32</span> /dev/sda1
</code></pre></div><p>For the <code>btrfs</code> partitions (everything else)<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkfs.btrfs -d raid1 -m raid1 /dev/sda2 /dev/sdb1 /dev/sdc1
</code></pre></div><p>Mount the filesystem, create the boot directory and mount the <code>EFI</code> partition:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mount /dev/sda2 /mnt
mkdir /mnt/boot
mount /dev/sda1 /mnt/boot
lsblk
</code></pre></div><h3 id="select-mirrors">Select mirrors</h3>
<p>Edit <code>/etc/pacman.d/mirrorlist</code> so that physically closer mirrors are
uncommented and at the top of the list.</p>
<h3 id="install-packages">Install packages</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pacstrap /mnt base linux linux-firmware tmux vim btrfs-progs ranger man-db
man-pages
</code></pre></div><h3 id="fstab">Fstab</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab
</code></pre></div><h2 id="part-2-chroot-environment">Part 2: Chroot Environment</h2>
<p>Changing root allows you to execute commands on the new operating system as if
it were running.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">arch-chroot /mnt
</code></pre></div><h3 id="root-password">Root password</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">passwd
</code></pre></div><h3 id="time-zone">Time zone</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ln -sf /usr/share/zoneinfo/<span style="color:#f92672">[</span>region<span style="color:#f92672">]</span>/<span style="color:#f92672">[</span>city<span style="color:#f92672">]</span> /etc/localtime
hwclock --systohc
</code></pre></div><h3 id="localization">Localization</h3>
<p>Edit <code>/etc/locale.gen</code>, uncomment <code>en_US.UTF-8 UTF-8</code>.</p>
<p>Generate locale with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">locale-gen
</code></pre></div><p>Create <code>/etc/locale.conf</code> and set <code>LANG</code> variable:</p>
<pre><code>LANG=en_US.UTF-8
</code></pre><h3 id="network-configuration">Network configuration</h3>
<p>Create <code>/etc/hostname</code>:</p>
<pre><code>[myhostname]
</code></pre><p>Add matching info to <code>/etc/hosts</code>:</p>
<pre><code>127.0.0.1       localhost
::1             localhost
127.0.1.1       [myhostname].localdomain    [myhostname]
</code></pre><p>Replace <code>127.0.1.1</code> with a static IP if appropriate.</p>
<h3 id="boot-loader4">Boot Loader<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bootctl install
pacman -S intel-ucode
</code></pre></div><p>Install the processor microcode<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pacman -S intel-ucode
</code></pre></div><p>Edit <code>/boot/loader/loader.conf</code>:</p>
<pre><code>default arch.conf
timeout 4
console-mode max
editor  no
</code></pre><p>Create <code>/boot/loader/entries/arch.conf</code>:</p>
<pre><code>title   Arch Linux
linux   /vmlinuz-linux
initrd  /intel-ucode.img
initrd  /initramfs-linux.img
options root=&quot;PARTUUID=[PARTUUID]&quot; rw
</code></pre><p>The <code>PARTUUID</code> for the above file can be located with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsblk -dno PARTUUID /dev/sda2
</code></pre></div><p><sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup></p>
<h2 id="part-3-configuring-the-new-system">Part 3: Configuring the new system</h2>
<p>The system should now be ready to restart and boot into the newly installed
operating system. Type <code>exit</code> to exit the chroot environment, then type
<code>reboot</code> command. Remove the installation media and watch your system boot!
This last section is about getting some basic configuration ready on the new
system so that it is usable and remotely accessible.</p>
<h3 id="time-synchronization">Time synchronization</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">timedatectl set-ntp true
</code></pre></div><h3 id="set-static-ip7">Set Static IP<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup></h3>
<p>Start/Enable both two systemd services for networking. <code>networkd</code> is for
setting the IP address and <code>resolved</code> is for DNS settings:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">systemctl enable systemd-networkd
systemctl start systemd-networkd
systemctl enable systemd-resolved
systemctl start systemd-resolved
</code></pre></div><p>Create the file <code>/etc/systemd/network/20-wired.network</code>:</p>
<pre><code>[Match]
Name=eno1

[Network]
Address=192.168.1.6/24
Gateway=192.168.1.1
DNS=1.1.1.1
DNS=8.8.8.8
</code></pre><p>You may need to restart <code>systemd-networkd</code> with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">systemctl restart systemd-networkd
</code></pre></div><p>Use <code>ip a</code> and <code>ip route</code> to confirm that all the addresses look right. If you
do not have an IP address yet double check that the network device is set to
UP with <code>ip link set [device] up</code>.</p>
<h3 id="ssh-access">SSH Access</h3>
<p>This is something that could have it&rsquo;s own post so I&rsquo;m just going to brush
over setting this up for now. Just install <code>openssh</code> and configure it by
editing <code>/etc/ssh/sshd_config</code>. After editing that file, use <code>systemctl enable/start sshd</code> to get the daemon running. We still have not setup the sudo
user so this is something that really should come later but I set it up as
soon as I can so that I was able to finish everything else from my laptop, with
my mechanical keyboard and comfy chair.</p>
<p>I temporarily allowed root access so that I could do this but that is really
not recommended and when I&rsquo;m finished I will be setting <code>PermitRootLogin no</code>
according to best practice.</p>
<h3 id="sudo-and-user-account">Sudo and user account</h3>
<p>Next up is getting a user account setup and allowing that user to issue
commands with elevated priveleges.</p>
<p>Install <code>sudo</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pacman -S sudo
</code></pre></div><p>Create new user, set password, and open sudoers file for editing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">adduser -m dexmexter
passwd dexmexter
EDITOR<span style="color:#f92672">=</span>vim visudo
</code></pre></div><p>With the sudoers file open, add the following lines:</p>
<pre><code>dexmexter ALL=(ALL) ALL
Defaults passwd_timeout=0
Defaults timestamp_timeout=10
</code></pre><p>Now you can switch to the new user and make sure it is working with <code>su dexmexter</code></p>
<h3 id="xdg-user-directories">XDG-User directories</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo pacman -S xdg-user-dirs
xdg-user-dirs update
</code></pre></div><h3 id="ssh-part-2">SSH part 2</h3>
<p>Okay now that we have a user account that is not <code>root</code> we can get <code>ssh</code>
working correctly. As long as the daemon <code>sshd.service</code> is running we should
be able to login with the user account. After confirming that this works,
close the ssh connection and copy your ssh key with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ssh-copy-id -i ~/.ssh/id_ed25519 dexmexter@dv-storage
</code></pre></div><p>Don&rsquo;t forget to undo the root access that was granted earlier and restart the
daemon. SSH is now good to go and the a basic server is ready. This</p>
<h1 id="conclusion">Conclusion</h1>
<p>That it for now, at this point you can throw the server in a closet somewhere
and start installing whatever special software you are planning to use with it.
This particular server, <code>dv-storage</code> will be configured as a network storage
drive that will be used to hold Proxmox VHD&rsquo;s that all cluster nodes have
access to.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Most of the material in this post is ripped from the fantastic <a href="https://wiki.archlinux.org/index.php/Installation_guide">arch
linux installation
guide</a> and other
archwiki articles. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I used the examples from <a href="https://wiki.archlinux.org/index.php/Parted">this
page</a> to help with the
partitioning syntax. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>The command for creating the Btrfs partitions was
from <a href="https://wiki.archlinux.org/index.php/Btrfs#Multi-device_file_system">this
page</a> <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>I use systemd-boot because it comes with systemd and I do not have need
for the complexity of grub. The archwiki has <a href="https://wiki.archlinux.org/index.php/Systemd-boot">helpful
instructions</a> as always <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p><a href="https://wiki.archlinux.org/index.php/Microcode">https://wiki.archlinux.org/index.php/Microcode</a> <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p><a href="https://wiki.archlinux.org/index.php/Persistent_block_device_naming#by-partuuid">https://wiki.archlinux.org/index.php/Persistent_block_device_naming#by-partuuid</a> <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p><a href="https://wiki.archlinux.org/index.php/Systemd-networkd">https://wiki.archlinux.org/index.php/Systemd-networkd</a> <a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content>
        </item>
        
        <item>
            <title>Mpd not working? Try starting with --user</title>
            <link>https://dextervolkman.com/posts/mpd_not_working/</link>
            <pubDate>Wed, 22 Jul 2020 21:44:40 -0700</pubDate>
            
            <guid>https://dextervolkman.com/posts/mpd_not_working/</guid>
            <description>This is an issue that has happened more than once now. I&amp;rsquo;ll restart my computer and ncmpcpp will not be able to locate the mpd database. If this happens here is what you should try.
Check if an mpd server is running with:
systemctl status mpd If the service is active, stop it with:
systemctl stop mpd.socket systemctl stop mpd Once it is stopped you can start it with the current user:</description>
            <content type="html"><![CDATA[<p>This is an issue that has happened more than once now. I&rsquo;ll restart my computer
and <code>ncmpcpp</code> will not be able to locate the <code>mpd</code> database. If this happens
here is what you should try.</p>
<p>Check if an <code>mpd</code> server is running with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">systemctl status mpd
</code></pre></div><p>If the service is active, stop it with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">systemctl stop mpd.socket
systemctl stop mpd
</code></pre></div><p>Once it is stopped you can start it with the current user:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">systemctl --user start mpd
</code></pre></div><p>I&rsquo;m certain there is a cleaner fix for this but it&rsquo;s only an issue when I
restart my computer which does not happen very often. Maybe what I&rsquo;ll try is
disabling the service with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">systemctl disable mpd
</code></pre></div><p>Then I&rsquo;ll need to find a way to start it with the <code>--user</code> flag on boot.</p>
]]></content>
        </item>
        
        <item>
            <title>Tar Backup and Restore</title>
            <link>https://dextervolkman.com/posts/tar-backup-and-restore/</link>
            <pubDate>Sat, 16 May 2020 15:06:00 -0700</pubDate>
            
            <guid>https://dextervolkman.com/posts/tar-backup-and-restore/</guid>
            <description>Preamble In my quest to learn and become more proficient with computers, I will often have some kind of ongoing personal project that I will work on in my spare time. Over the past few weeks the project that has taken up my evenings has been building a Linux From Scratch system. The goal is to build a working linux system by downloading and compiling everything manually from the source code.</description>
            <content type="html"><![CDATA[<h2 id="preamble">Preamble</h2>
<p>In my quest to learn and become more proficient with computers, I will often
have some kind of ongoing personal project that I will work on in my spare
time. Over the past few weeks the project that has taken up my evenings has
been building a <a href="http://www.linuxfromscratch.org/index.html">Linux From
Scratch</a> system. The goal is to
build a working linux system by downloading and compiling everything manually
from the source code.</p>
<p>I chose the systemd version of <a href="http://www.linuxfromscratch.org/lfs/view/stable-systemd/">the
book</a> to walk
through.  I learned a ton about how programs are built and what pieces are
needed for a working system. I ended up with an extremely basic but functioning
linux system. It was a fun and rewarding project but was also a fairly tedious
process to compile every package manually. If I were to ever do it again I will
likely go for the <a href="http://www.linuxfromscratch.org/alfs/">Automated Linux From
Scratch</a> version.</p>
<p>If you are wanting to look at the system you can download the backup right
<a href="https://drive.google.com/file/d/1JXqcG9EnXOpNSHf7I5TTrtikatTHqPnF/view?usp=sharing">here</a>.</p>
<p>I have no intentions of using this system on a regular basis but I did want to
find a way to back it up and make it available somewhere that I can look back
at later. Figuring out how to actually backup and restore the system was not
nearly as straight forward as I initially expected, mostly because I did not
have much prior experience with backing up and restoring a linux system. This
was a big part of the learning process and I wanted to document that portion
because I am sure it will be useful to reference later.</p>
<p>This is one way to create a full system backup and restore that backup to a new
disk. These instructions are based on <a href="https://help.ubuntu.com/community/BackupYourSystem/TAR">this
page</a> from the Ubuntu
Community Wiki. I also needed some help getting the system to boot which I
eventually found
<a href="https://howtoubuntu.org/how-to-repair-restore-reinstall-grub-2-with-a-ubuntu-live-cd">here</a>.</p>
<h2 id="backup-system">Backup system</h2>
<p>The backup process can be done from the system that is being backed up. This
process uses the <code>tar</code> program to create on archive of all the system files,
this archive is then compressed so it takes up less space. The following
commands should either be prefaced with <code>sudo</code>. If you do not want to type
<code>sudo</code> before every command, you can switch to the root user with <code>sudo su</code>.</p>
<p>Switch to root directory.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd /
</code></pre></div><p>Run tar to backup the entire system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tar -cvpzf backup.tar.gz --exclude<span style="color:#f92672">=</span>/backup.tar.gz --one-file-system /
</code></pre></div><p>Let&rsquo;s break that down.</p>
<ul>
<li><code>tar</code> A program used for working with archives.
<ul>
<li><code>c</code> - create a new archive</li>
<li><code>v</code> - verbose mode</li>
<li><code>p</code> - preserve file permissions</li>
<li><code>z</code> - compress the archive</li>
<li><code>f</code> <!-- raw HTML omitted --> - the name of the archive file to being created. It will be
made in the working directory.</li>
</ul>
</li>
<li><code>--exclude=/example/path</code> - This is a list of directories that the program
should not backup. It is important that tar doesn&rsquo;t try to backup the archive
it is using creating, this would create a recursive mess and is sure to break
things.</li>
<li><code>--one-file-system</code> - This is used to prevent tar from trying to backup any
other filesystems, including virtual filesystems like <code>/proc</code>, <code>/sys</code>,
<code>/mnt</code>, <code>/media</code>, <code>/run</code>, and <code>/dev</code>. These are temporary filesystems
specific to a running  system and will be recreated when the system is
booted. Backing them up would cause issues.</li>
<li><code>/</code> - Last comes the directory being backed up, in this case we are backing
up the root directory which will recursively include the entire system.</li>
</ul>
<p>Once this process has completed, the archive can be copyied or moved to a USB.
Plug in the USB and locate it with <code>lsblk</code> or <code>fdisk -l</code>. Next mount the drive.
Replace <code>XY</code> with the letter and partition number for the USB drive.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mount /dev/sdXY /mnt
</code></pre></div><p>Move the archive file to the USB drive.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mv /backup.tar.gz /mnt/
</code></pre></div><p>Unmount the USB.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">umount /mnt
</code></pre></div><p>The USB can now be removed. The system has now been succesfully backed up. Next
we will move onto how to restore the archive to a different hard drive.</p>
<h2 id="prepare-new-drive">Prepare new drive</h2>
<p>This next section should be done from a Live installation environment. For
instructions on how to create a bootable USB, download an ISO and go
through my <a href="/posts/bootable-usb">previous post</a> (Ubuntu is a good
place to start but any distribution with a Live installer will work).</p>
<p>Once you are have the hard drive you wish to restore to hooked up and are
booted into the recovery environment, the next step is to format and prepare
the new drive. These instructions have only been tested with Legacy Boot and
will not work with a UEFI system. Booting with UEFI is beyond the scope of this
post.</p>
<p>The easiest way to prepare the new drive is using <code>gparted</code> or a similar
program. You&rsquo;ll need to format the drive with a new partition table as well as
a new partition that is formated with a filesystem, typically <code>Ext4</code> is used.</p>
<h2 id="transfer-backup-to-the-new-drive">Transfer backup to the new drive</h2>
<p>Make sure that the new drive is mounted. Then copy all the contents of the
archive to the new drive.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tar -xcpzf /path/to/backup.tar.gz -C /path/to/mounted/drive --numeric-owner
</code></pre></div><p>Options explained:</p>
<ul>
<li><code>x</code> - Tells tar to extract the archive file.</li>
<li><code>-C &lt;directory&gt;</code> - Change to a specific directory before extracting. In this
case it would be the path where the filesystem for the new drive is mounted.</li>
<li><code>--numeric-owner</code> - Tells tar to restore the numeric owners of the files in
the archive, rather than any user names from the restoration environment that
might match accidentally making some files inaccessible because of
missmatched user id&rsquo;s.</li>
</ul>
<h2 id="restore-grub">Restore grub</h2>
<p>Lastly we need to restore the bootloader in order to make the system bootable
again. These commands assume that the partiton with the filesystem is
mounted to <code>/mnt</code>.</p>
<p>Bind the directories that <code>grub</code> will need.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo mount --bind /dev /mnt/dev <span style="color:#f92672">&amp;&amp;</span>
sudo mount --bind /dev/pts /mnt/dev/pts <span style="color:#f92672">&amp;&amp;</span>
sudo mount --bind /proc /mnt/proc <span style="color:#f92672">&amp;&amp;</span>
sudo mount --bind /sys /mnt/sys
</code></pre></div><p>Jump into the restored system with <code>chroot</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo chroot /mnt
</code></pre></div><p>Install <code>grub</code> to the device holding the restored system. Then check that it
installed correctly and update.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">grub-install /dev/sdX
grub-install --recheck /dev/sdX
update-grub
</code></pre></div><p>It is a good idea to check that <code>/etc/fstab</code> and <code>boot/grub/grub.cfg</code> are
referencing the correct drives and partition numbers.</p>
<p>That&rsquo;s it! You can now <code>exit</code>, <code>unmount</code> everything and then <code>reboot</code> the system.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">exit <span style="color:#f92672">&amp;&amp;</span>
sudo umount /mnt/sys <span style="color:#f92672">&amp;&amp;</span>
sudo umount /mnt/proc <span style="color:#f92672">&amp;&amp;</span>
sudo umount /mnt/dev/pts <span style="color:#f92672">&amp;&amp;</span>
sudo umount /mnt/dev <span style="color:#f92672">&amp;&amp;</span>
sudo umount /mnt

sudo reboot
</code></pre></div><p>Hopefully it boots. If you can get to the <code>grub</code> command line but cannot boot
into the file system, <code>grub.cfg</code> is probably misconfigured and looking for the
incorrect drive to boot from. You&rsquo;ll need to find other instructions for how to
find and boot with the correct settings from within <code>grub</code>.</p>
]]></content>
        </item>
        
        <item>
            <title>Create a Bootable USB with dd</title>
            <link>https://dextervolkman.com/posts/bootable-usb/</link>
            <pubDate>Mon, 04 May 2020 17:56:49 -0700</pubDate>
            
            <guid>https://dextervolkman.com/posts/bootable-usb/</guid>
            <description>This is something I have had to lookup on more than one occasion and would like my own reference so that I don&amp;rsquo;t have to look it up anymore.
First locate the name of the device using:
lsblk and/or
sudo fdisk -l In my case it is sdb. Make sure the device is not mounted.
umount /dev/sdb* Next we need to format the drive so that it is empty. This can be done by initializing a new file system on the disk.</description>
            <content type="html"><![CDATA[<p>This is something I have had to lookup on more than one occasion and would like
my own reference so that I don&rsquo;t have to look it up anymore.</p>
<p>First locate the name of the device using:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsblk
</code></pre></div><p>and/or</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo fdisk -l
</code></pre></div><p>In my case it is <code>sdb</code>. Make sure the device is not mounted.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">umount /dev/sdb*
</code></pre></div><p>Next we need to format the drive so that it is empty. This can be done by
initializing a new file system on the disk. If it is a Linux based operating
system you are flashing then just use <code>Ext4</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo mkfs.ext4 /dev/sdb
</code></pre></div><p>Use <code>dd</code> (data duplicator) to copy the ISO to the newly formatted disk.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo dd <span style="color:#66d9ef">if</span><span style="color:#f92672">=[</span> input file <span style="color:#f92672">]</span> of<span style="color:#f92672">=[</span> output file <span style="color:#f92672">]</span> status<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;progress&#34;</span>
</code></pre></div><p>The USB should now be ready. Pretty simple, maybe I&rsquo;ll remember how to do it
one day.</p>
]]></content>
        </item>
        
        <item>
            <title>Things Worth Sharing #1</title>
            <link>https://dextervolkman.com/posts/readings-1/</link>
            <pubDate>Sun, 26 Apr 2020 10:21:28 -0700</pubDate>
            
            <guid>https://dextervolkman.com/posts/readings-1/</guid>
            <description>Since I don&amp;rsquo;t have any content for this site yet and I would like to get some practice putting articles together, I have an idea for a series I could do. I use an RSS reader called tmux to collect articles from a variety of different places that I find interesting. Every day I look through this list and pick out a handful of headlines that look interesting. My idea is to share these articles along with a brief explanation for why I enjoyed them.</description>
            <content type="html"><![CDATA[<p>Since I don&rsquo;t have any content for this site yet and I would like to get some
practice putting articles together, I have an idea for a series I could do. I
use an RSS reader called tmux to collect articles from a variety of different
places that I find interesting. Every day I look through this list and pick out
a handful of headlines that look interesting. My idea is to share these
articles along with a brief explanation for why I enjoyed them. Maybe this will
turn into something more regular, we&rsquo;ll see.</p>
<h2 id="the-good-guybad-guy-mythhttpsgetpocketcomexploreitemthe-good-guy-bad-guy-mythutm_sourcepocket-newtab"><a href="https://getpocket.com/explore/item/the-good-guy-bad-guy-myth?utm_source=pocket-newtab">The Good Guy/Bad Guy Myth</a></h2>
<p>This article points out that the majority of the stories western culture tends
to tell in modern times deal in a simplistic dichotomy between the good side
and the bad side. The interesting thing about this is that stories and myths
have not always been told using these clearly delineated moral lines. The
author uses several examples from history to show that stories used to be told
differently and then argues that the reason our stories became what they are
today is to serve a specific political purpose.</p>
<p>Modern stories, the author posits, are designed to encourage and reinforce the
concept of the separate nation states pitted against each other. Listeners of
these stories are taught to view the world through the lens of us against them.
It is a form of othering that separates humanity into camps of allies that can
be trusted and enemies that must be destroyed.</p>
<h2 id="the-pandemic-is-bringing-us-closer-to-our-robot-takeout-futurehttpsarstechnicacomtech-policy202004the-pandemic-is-bringing-us-closer-to-our-robot-takeout-future"><a href="https://arstechnica.com/tech-policy/2020/04/the-pandemic-is-bringing-us-closer-to-our-robot-takeout-future/">The Pandemic is bringing us closer to our robot takeout future</a></h2>
<p>A report detailing the recent increase in demand for groceries to be delivered
directly to people&rsquo;s homes and a few companies that seem to be getting close to
having autonomous robots that can fill that need. I would love to have this
become a reality but the city I live in is likely not densely populated enough
to make it a viable market for something like this. Once there are full sized
autonomous cars that can be designed to make grocery deliveries, then I think
that there is some better potential. If groceries could be reliably delivered
to my door, I&rsquo;m not sure I would need a car anymore. That would be really nice.</p>
]]></content>
        </item>
        
        <item>
            <title>My First Post</title>
            <link>https://dextervolkman.com/posts/my-first-post/</link>
            <pubDate>Tue, 21 Apr 2020 21:14:18 -0700</pubDate>
            
            <guid>https://dextervolkman.com/posts/my-first-post/</guid>
            <description>This is the first post! I&amp;rsquo;m not sure yet what I&amp;rsquo;m going to do with this space but my first instinct is to start using it as a place to write some tutorials so that I can remind my future self of all the little tips and tricks I&amp;rsquo;ve learned.</description>
            <content type="html"><![CDATA[<p>This is the first post! I&rsquo;m not sure yet what I&rsquo;m going to do with this space
but my first instinct is to start using it as a place to write some tutorials
so that I can remind my future self of all the little tips and tricks I&rsquo;ve
learned.</p>
]]></content>
        </item>
        
    </channel>
</rss>
